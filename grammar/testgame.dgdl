game(id:TestGame){

    roles(Role, Role2)
    participants(min:2, max:undefined)
    player(id:Test, min:2, max:2)
    player(id:Test2, roles:{TestRole})

    store(id:TestStore, owner:Test, structure:set, visibility:public, {c})

    backtracking(on)

    extURI(id:MyURI, uri:"http://arg.tech/test")
    extURI(id:MyOtherURI, uri:"http://arg.tech/test2")

    rule(id:TestRule, scope:initial){
        move(add, next, TestMove, $User, {p});
        if (!inrole(Player, Test) && inspect(in, {p}, TestStore, past) && event(past, TestMove, {"p", $TestVar$})){
          move(add, next, Test, Test);
        }else{
          move(add, next, Test, Test);
          store(add, {p, "hi"}, TestStore);
          status(active, TestGame);
          assign(Test, Role2);
          unassign(Test, Role2);
        };
    }

    interaction(id:TestMove, addressee:TestUser, content:{p}, opener:"Test"){
      save({p,"test"},$TestVar$);
      if(inrole(Player, Test)){
        move(add, next, Test2, $Test, TestPlayer);
      }
    }
}
